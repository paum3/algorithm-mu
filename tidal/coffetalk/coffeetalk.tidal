# intro

Tidal https://tidalcycles.org/  make patterns with code

language for describing
(e.g., polyphonic, polyrhythmic, generative) sequences.

extensive library ... for transforming and combining them.

quickly create complex patterns from simple ingredients. 

does not make sound itself, uses 
https://supercollider.github.io/
https://github.com/musikinformatik/SuperDirt

is embedded in the Haskell language https://www.haskell.org/

## Why Haskell and what does TidalCycles benefit from?

1. No side effects
2. Static type system
3. Polymorphy
4. Higher order functions
5. Functors, Applicative, Monads

## Pattern and Time 

abcabcabc...

repeat  abc

Pattern  === time -> [event]

-- Time as Arc and Rational
type Time = Rational

# sources of sound

## synthesizers

s "superpiano" >| n "0"

-- "superpiano" and "0" are both patterns but have different types
-- Keywords: Polymorphy and static type system
:t Pattern

:t s

d1 $ s "superpiano" >| n "0"

d1 $ s "superpiano" >| n "c"

## samples

d1 $ s "numbers" >| n "0"

s "numbers" >| n "0" # speed 1

d1 $ s "numbers" >| n "0" # speed rand

-- Why does 'speed rand' work?
-- Answer: higher order functions!

## effects

d1 $ s "numbers" >| n "0" # speed rand # pan rand
  # delay 1 # delayfb 0.8 # delayt (1/3)

# patterns

## concatenation (naive)

d1 $ s "superpiano" >| n "<c d e>"

d2 $ s "superpiano" >| n "<c d e>"
  # delay 1 # delayfb 0.8 # delayt (1/3)


## speed up, speed down:

slow 3 $ s "superpiano" >| n "<c d e>"

## combine two patterns

d2 $ s "<superpiano superhammond>" >| n "<c d e>"

-- values from left (<), right (>), combined (+), (*)

d2 $ s "superpiano" >| n ( "<c d>" |+| "<5 7>" )

## insertion: some haskell magic

-- This works because a Pattern is a functor instance
n $ 3 + "1 2 3 4"

-- and + is an inline function 
:t (+)

(+) 3 3

:t (3 + 3)

3 + 3 

-- in haskell you see the fmap function
n $ fmap (+3) ("1 2 3 4")

n $ (+3) <$> ("1 2 3 4")

-- This works because a Pattern is an applicative instance
n "1 2 3" + n "4 5 6"

n "1 [2 3] 4" + n "4 5 6"

## functions that produce and modify patterns: run, slow, rev

d1 $ s "superpiano" >| n (run 6)

d1 $ s "superpiano" >| n (slow 6 $ run 6)

d1 $ s "superpiano" >| n (scale "major" $ run 6)  

d1 $ s "superpiano" >| n (scale "major" $ run 6) + n "a" 

-- where do we put the rev?

d1 $ s "superpiano" # n ("[1 2 3]") |+| n (rev "[1 2 3]")

## parallel composition: stack, ","

d1 $ s "superpiano" >| n (stack ["<c3 g3 a3>", "<e f>" ])

d1 $ s "superpiano" >| n "<c3 g3 a3, e f>"

## cat and speed-up: fastcat "[ .. ]"

d1 $ s "superpiano" >| n "<c3 g3 a3>"

d1 $ fast 3 $ s "superpiano" >| n "<c3 g3 a3>"

d1 $ s "superpiano" >| n "[c3 g3 a3]"

d1 $ s "superpiano" >| n "[c3 g3 a3, e f]"

## time-shift  ~>

d1 $ s "superpiano" >| n ( "<0 0.75>" ~> "[1 3 5 8]" ) 

s "superpiano" >| n ("0.75" ~> "[1 3 5 8]" ) 

d1 $ s "superpiano" >| n ( "<0 0.75 0.5>" ~> "[1 3 5 8]" ) 

## random number generator

d1 $ s "superpiano" >| n "[c a f e]"

## playing modified pattern version parallel 

d1 $ off "0.25" (fast 0.5) $ s "superpiano" >| n "[c a f e]"

# The five layer of pattern

1. Sequencing: "<>", "[]"
2. Symmetry: rev, ~>
3. Imperfektion: "?0.5"
4. Composition: "<", ">", "+", "*" 
5. Interference: off, superimpose

# Nearly all above
setcps 0.8

d1 $ s "superpiano" >| n ( "<0 0.75>" ~> "<<e e gs4> <gs b ~ >>" )
     # delay 1 # delayfb 0.5 # delayt (1/3)

d2 $ s "superpiano" >| 
  n ( "<0 0.5>" ~> (scale "major" $ slow "[3?,6]" $ rev $ run 6) ) 
  |+ n "[-8,+4]" # delay 1 # delayfb 0.5 # delayt (1/3) # gain 0.8
   
d3 $ s "supersquare" >| n ( "e [e6 ~] ~ [b gs]" ) # gain 0.8

d4 $ s "[bd 808cy 808cy bd]*2" # lpf 5000 

d5 $ s "supersaw" >| n "<e2 e3*2>"

# references:

* https://tidalcycles.org/index.php/All_effects_and_synths
* https://github.com/musikinformatik/SuperDirt
* https://github.com/tidalcycles/Dirt-Samples

* https://tidalcycles.org/index.php/Tutorial
* https://www.imn.htwk-leipzig.de/~waldmann/etc/untutorial/tc/types/
* https://tidalcycles.org/index.php/Mini_notation_syntax

* https://hackage.haskell.org/package/tidal-1.6.1/docs/Sound-Tidal-Core.html#v:cat