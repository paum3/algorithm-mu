-- This is a little demo script of my custom speed function

-- Calculating the n'th root of a value
nroot :: (Integral a, Floating b) => a -> b -> b 
n `nroot` x = x ** (1 / fromIntegral n)

-- Calculates the n'th root of all pattern values in p and use the function f (like speed)
nrootFuncs :: Pattern Double -> (Pattern Double -> ControlPattern) -> ControlPattern
nrootFuncs p f = f (fmap (12 `nroot` 2 **) (p))

-- Define custom speed function and custom pitch shifting rate (psrate)
speed' :: Pattern Double -> ControlPattern
speed' p = nrootFuncs p speed  

psrate' :: Pattern Double -> ControlPattern
psrate' p = nrootFuncs p psrate

setcps 1

-- This is how you normaly use speed
d1 $ speed "1 0.5 2 -0.5" # s "808"

-- And this is the custom speed function witch using numbers
d1 $ speed' "1 8 5 12 3" # s "808"

-- Or note names
d1 $ speed' "c a f f e e" # s "808"

-- Or chords
d1 $ speed' "c'maj'4" # s "808"

-- And of course arpeggios can be created from the chords
d1 $ speed' (arp "<up down>" "c'maj'4") # s "808"

-- You can use different samples and change their speed together
d1 $ slow 2 $ speed' (arp "<up down>" "c'maj e'min g'maj a'min") #  
   n "[12,19,24]" # s "bss" # disp 0.000001 # legato 1

-- psrate changes a pitch of a signal (it use the PitchShift Ugen from supercollider ) 
d1 $ psrate' (arp "<up down>" "~ c'maj e'min g'maj a'min") 
   # s "in" # disp 0.0003 # legato 2 # gain 1.3

-- The above does something similar to:
d1 $ n (arp "<up down>" "~ c'maj e'min g'maj a'min") 
   # s "inr" # legato 2
-- But you can here, that the synthdef "inr" has some default effects.

-- But I like the effects you can create with it
d1 $ psrate' (arp "<up down>" "c'maj'8*<1 2 4 8>") 
   # s "in" # disp 0.0003 # legato 2 # gain 1.4

-- And you can use psrate for samples as well. 
-- Which is a completely different effect, 
-- because it creates gaps and uses an envelope on the parts of the sample.
d1 $ psrate' (arp "<up down>" "c'maj'8") # s "808" # disp 0.01 # gain 1.5

-- Some fancy code with speed' in action :-)
-- And thanks for satoruki for the shared function "myarp"
do 
    let myarp sc r2 f = scale sc (stepr' 32 0 r2 f)
    setcps 0.2
    d1 $ fast "<0.5!3 1!4 [0.5 1! 2]>" $ speed' (myarp "minor" 12 (fast 8 $ (perlin*isaw**2))) 
        # s "[808, notes:8, notes:3]" # legato 0.4 # delaytime "[0.4|0.2|0.1]" 
        # delayfeedback 0.5 # delay 1
        # cutoff (slow 4 $ (saw * 5000) + 500)peed function

-- Calculating the n'th root of a value
nroot :: (Integral a, Floating b) => a -> b -> b 
n `nroot` x = x ** (1 / fromIntegral n)

-- Calculates the n'th root of all pattern values in p and use the function f (like speed)
nrootFuncs :: Pattern Double -> (Pattern Double -> ControlPattern) -> ControlPattern
nrootFuncs p f = f (fmap (12 `nroot` 2 **) (p))

-- Define custom speed function and custom pitch shifting rate (psrate)
speed' :: Pattern Double -> ControlPattern
speed' p = nrootFuncs p speed  

psrate' :: Pattern Double -> ControlPattern
psrate' p = nrootFuncs p psrate

setcps 1

-- This is how you normaly use speed
d1 $ speed "1 0.5 2 -0.5" # s "808"

-- And this is the custom speed function witch using numbers
d1 $ speed' "1 8 5 12 3" # s "808"

-- Or note names
d1 $ speed' "c a f f e e" # s "808"

-- Or chords
d1 $ speed' "c'maj'4" # s "808"

-- And of course arpeggios can be created from the chords
d1 $ speed' (arp "<up down>" "c'maj'4") # s "808"

-- You can use different samples and change their speed together
d1 $ slow 2 $ speed' (arp "<up down>" "c'maj e'min g'maj a'min") #  
   n "[12,19,24]" # s "bss" # disp 0.000001 # legato 1

-- psrate changes a pitch of a signal (it use the PitchShift Ugen from supercollider ) 
d1 $ psrate' (arp "<up down>" "~ c'maj e'min g'maj a'min") 
   # s "in" # disp 0.0003 # legato 2 # gain 1.3

-- The above does something similar to:
d1 $ n (arp "<up down>" "~ c'maj e'min g'maj a'min") 
   # s "inr" # legato 2
-- But you can here, that the synthdef "inr" has some default effects.

-- But I like the effects you can create with it
d1 $ psrate' (arp "<up down>" "c'maj'8*<1 2 4 8>") 
   # s "in" # disp 0.0003 # legato 2 # gain 1.4

-- And you can use psrate for samples as well. 
-- Which is a completely different effect, 
-- because it creates gaps and uses an envelope on the parts of the sample.
d1 $ psrate' (arp "<up down>" "c'maj'8") # s "808" # disp 0.01 # gain 1.5

-- Some fancy code with speed' in action :-)
-- And thanks for satoruki for the shared function "myarp"
do 
    let myarp sc r2 f = scale sc (stepr' 32 0 r2 f)
    setcps 0.2
    d1 $ fast "<0.5!3 1!4 [0.5 1! 2]>" $ speed' (myarp "minor" 12 (fast 8 $ (perlin*isaw**2))) 
        # s "[808, notes:8, notes:3]" # legato 0.4 # delaytime "[0.4|0.2|0.1]" 
        # delayfeedback 0.5 # delay 1
        # cutoff (slow 4 $ (saw * 5000) + 500)
